version: '3'
services:

  postgres:
    build: ./postgres
    container_name: postgres-movies
    restart: always
    env_file:
      - ./postgres/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/movies_database.ddl:/docker-entrypoint-initdb.d/create_schema.sql
#      - ./postgres/movies_database.sql:/docker-entrypoint-initdb.d/movies_database.sql
    networks:
      - movies
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
#    expose:
#      - "5432"
    ports:
      - "5432:5432"

#  redis:
#    image: redis:7.0.8-alpine
#    restart: always
#    volumes:
#      - redis_data:/data
#    networks:
#      - movies
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]

  elastic:
    build: ./elastic
    container_name: elastic-movie
    restart: always
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms2048m -Xmx2048m"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - movies
#    expose:
#      - "9200"
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  etl:
    build: ./postgres_to_es
    container_name: etl-movies
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      elastic:
        condition: service_healthy
#      redis:
#        condition: service_healthy
    env_file:
      - ./postgres_to_es/.env
    networks:
      - movies

#  api:
#    build: ./fastapi-solution
#    container_name: api-movies
#    restart: always
#    depends_on:
#      postgres:
#        condition: service_healthy
#      elastic:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    env_file:
#      - .env
#    networks:
#      - movies

#  nginx:
#    build: ./nginx
#    container_name: nginx-movies
#    restart: always
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/conf.d:/etc/nginx/conf.d:ro
#    depends_on:
#      - api
#    networks:
#      - movies
#    ports:
#      - "80:80"

volumes:
  postgres_data:
    name: movies
#  redis_data:
#    name: redis
  elastic_data:
    name: elastic

networks:
  movies:
    driver: bridge
    name: movies